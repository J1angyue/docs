import{_ as i,c as a,o as e,a2 as p}from"./chunks/framework.iYiGCPlJ.js";const n="/docs/assets/2023-10-04_120951.BBcSevB1.jpg",t="/docs/assets/2023-10-04_115834.C9d6Hckl.jpg",l="/docs/assets/2023-10-04_123321.CG9-ePZP.jpg",h="/docs/assets/2023-10-04_123838.B20ux2d6.jpg",d="/docs/assets/CD%E4%B8%BB%E8%A6%81%E8%BF%87%E7%A8%8B.-ud1oIic.png",o="/docs/assets/2023-10-06_114140.C-7RU7ET.jpg",k="/docs/assets/2023-10-06_115207.ChcIFXdw.jpg",c="/docs/assets/2023-10-07_092947.BWJ2IVN2.jpg",r="/docs/assets/2023-10-07_143341.bQWA-ZKz.jpg",g="/docs/assets/2023-10-06_120251.8DmZQU1l.jpg",F="/docs/assets/2023-10-07_161634.CprUVpA2.jpg",m="/docs/assets/2023-10-07_162255.ovbHic6F.jpg",C="/docs/assets/2023-10-07_165040.BvP8vtmr.jpg",y="/docs/assets/2023-10-07_175559.Cvc4EVA6.jpg",u="/docs/assets/2023-10-07_080444.paV8KF4l.jpg",b="/docs/assets/2023-10-07_145312.CsKg5MGb.jpg",B="/docs/assets/2023-10-07_182151.5zjbm8hm.jpg",v="/docs/assets/CD%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B.DqAMTxwF.png",_="/docs/assets/2023-10-08_082325.DTpuwhg0.jpg",s="/docs/assets/2023-10-11_110504.BRFBw0eK.jpg",E="/docs/assets/2023-10-11_114200.BfXkx4mb.jpg",j="/docs/assets/2023-10-11_114406.Dg94fu6W.jpg",z=JSON.parse('{"title":"Jenkins","description":"","frontmatter":{},"headers":[],"relativePath":"jenkins/index.md","filePath":"jenkins/index.md"}'),f={name:"jenkins/index.md"},D=p(`<h1 id="jenkins" tabindex="-1">Jenkins <a class="header-anchor" href="#jenkins" aria-label="Permalink to &quot;Jenkins&quot;">​</a></h1><h2 id="提升镜像拉取速度-可选" tabindex="-1">提升镜像拉取速度（可选） <a class="header-anchor" href="#提升镜像拉取速度-可选" aria-label="Permalink to &quot;提升镜像拉取速度（可选）&quot;">​</a></h2><p>检查是否有加速配置，运行命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info</span></span></code></pre></div><ol><li><p>若返回类似以下文字则说明有镜像加速配置，但镜像源可能是未生效：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Mirrors:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  https://hub-mirror.c.163.com/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  https://mirror.baidubce.com/</span></span></code></pre></div><p>执行命令，使源配置生效：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon-reload</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div></li><li><p>若没有返回上述文字，则需要配置镜像源：</p><p>准备镜像配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;registry-mirrors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;https://hub-mirror.c.163.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;https://mirror.baidubce.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>执行命令</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/docker/daemon.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将镜像 json 粘贴到 daemon.json 文件中，保存并退出后执行下面的命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon-reload</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div><p>镜像加速配置完成，加速生效。</p></li></ol><h2 id="使用-docker-安装-jenkins" tabindex="-1">使用 docker 安装 Jenkins <a class="header-anchor" href="#使用-docker-安装-jenkins" aria-label="Permalink to &quot;使用 docker 安装 Jenkins&quot;">​</a></h2><h3 id="安装与启动" tabindex="-1">安装与启动 <a class="header-anchor" href="#安装与启动" aria-label="Permalink to &quot;安装与启动&quot;">​</a></h3><p>官方教程：<a href="https://www.jenkins.io/zh/doc/tutorials/build-a-node-js-and-react-app-with-npm/" target="_blank" rel="noreferrer">使用 npm 构建 Node.js 和 React 应用</a></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/jenkins_home:/var/jenkins_home</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  jenkins/jenkins:lts</span></span></code></pre></div><p>运行后提示：<code>Unable to find image &#39;jenkins/jenkins:lts&#39; locally</code>，等待几秒钟后会自动拉取 <code>jenkins/jenkins:lts</code></p><p>等待拉取与安装完成…</p><h3 id="初次进入-jenkins" tabindex="-1">初次进入 Jenkins <a class="header-anchor" href="#初次进入-jenkins" aria-label="Permalink to &quot;初次进入 Jenkins&quot;">​</a></h3><p>首次打开 Jenkins 网页时需要输入初始密码</p><h4 id="获取初始密码" tabindex="-1">获取初始密码 <a class="header-anchor" href="#获取初始密码" aria-label="Permalink to &quot;获取初始密码&quot;">​</a></h4><p>等待<code>docker run</code>运行完成，再运行命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins</span></span></code></pre></div><p>输出以下文本，复制 <code>\${初始密码}</code></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Jenkins</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> initial</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> required.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> An</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> admin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> has</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> created</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generated.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> proceed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> installation:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${初始密码}</span></span></code></pre></div><p><img src="`+n+'" alt="复制初始密码"></p><h4 id="首次打开-jenkins" tabindex="-1">首次打开 Jenkins <a class="header-anchor" href="#首次打开-jenkins" aria-label="Permalink to &quot;首次打开 Jenkins&quot;">​</a></h4><ol><li><p>浏览器打开<code>http:${服务器 IP}:8080</code></p><p><img src="'+t+'" alt="初次进入Jenkins"></p></li><li><p>选择<code>安装推荐的插件</code></p><p>等待插件安装完成，有些插件可能会安装失败，多次重试安装后仍失败则直接跳过</p></li><li><p>创建第一个管理员用户</p><p>可以直接使用默认的 <code>admin</code> 账号登录（点击<code>使用admin账户继续</code>），也可以新建管理员用户；</p><p>为了防止他人猜到账号，这里选择新建管理员用户：填写完表单后点击右下角<code>保存并完成</code></p><p><img src="'+l+'" alt="创建第一个管理员用户"></p></li><li><p>配置实例</p><p>不需要通过域名访问时不需要更改 Jenkins URL，点击<code>保存并完成</code>即可</p><p><img src="'+h+'" alt="创建第一个管理员用户"></p></li><li><p>重启 Jenkins</p><p>即使已经安装了汉化插件有些文本仍是英文，重启后就能变成中文，手动运行命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins</span></span></code></pre></div></li></ol><p>Jenkins 的搭建已经完成，后文是通过 Jenkins 实现 CD：</p><h2 id="使用-jenkins-进行-cd" tabindex="-1">使用 Jenkins 进行 CD <a class="header-anchor" href="#使用-jenkins-进行-cd" aria-label="Permalink to &quot;使用 Jenkins 进行 CD&quot;">​</a></h2><p>CD 的主要过程如下：</p><p><img src="'+d+'" alt="CD主要过程"></p><h3 id="安装-配置插件" tabindex="-1">安装 &amp;&amp; 配置插件 <a class="header-anchor" href="#安装-配置插件" aria-label="Permalink to &quot;安装 &amp;&amp; 配置插件&quot;">​</a></h3><p>依次打开插件安装界面：<code>Dashboard - 系统管理 - 插件管理 - Available plugins</code></p><p>在搜索输入框内输入插件完整的名称、选中后点击<code>安装</code>按钮</p><p><img src="'+o+'" alt="安装插件"></p><ol><li><p><code>pull</code>：拉取代码</p><ol><li><p>安装插件：<code>Git</code>（通常作为默认插件在安装 Jenkins 时已自动安装）</p></li><li><p>插件安装完成过后依次打开 <code>Dashboard - 系统管理 - 系统配置</code>，找到<code>Git plugin</code>，填写本地 git 账户的昵称与邮箱、点击保存 <img src="'+k+'" alt="配置本地Git"></p></li><li><p>配置 gitlab 凭据</p><p>依次打开 <code>Dashboard - 系统管理 - 凭据管理 - 添加凭据</code><img src="'+c+'" alt="凭据管理"></p><p>选择<code>Username with password</code>，填入登录 gitlab 时使用的账号密码以及其他附属信息，最后点击<code>Create</code><img src="'+r+'" alt="创建凭据"></p></li></ol></li><li><p><code>build</code>：执行构建命令，需要 <code>nodejs</code> 环境</p><ol><li><p>安装插件：<code>NodeJS</code></p></li><li><p>插件安装完成过后依次打开<code>Dashboard - 系统管理 - 全局工具配置</code>，找到<code>NodeJS 安装</code>，点击<code>新增 NodeJS</code></p></li><li><p>选择 node 版本，并点击<code>保存</code><img src="'+g+'" alt="选择node版本"></p></li><li><p>更换<code>npm Taobao</code>源</p><ol><li><p>依次点开<code>Dashboard - 系统管理 - Managed files - Add a new Config</code></p></li><li><p>选择<code>Npm config file</code>，最后点击<code>Next</code><img src="'+F+'" alt="创建Npm-config-file"></p></li><li><p>在新表单中填入名称等必要项后点击<code>新增</code><img src="'+m+'" alt="创建Npm-config-file"></p></li><li><p>填入淘宝源：<code>https://registry.npm.taobao.org</code>后点击<code>Submit</code><img src="'+C+'" alt="创建Npm-config-file"></p></li></ol><div class="tip custom-block"><p class="custom-block-title">提示</p><p>也可以不配置更换 npm 源，构建时指定 npm 源也可以：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npm.taobao.org</span></span></code></pre></div></div></li></ol></li><li><p><code>deploy</code>：部署，需要连接别的服务器<code>传输文件</code>并执行<code>部署脚本</code></p><ol><li><p>安装插件：<code>Publish over SSH</code></p></li><li><p>插件安装完成过后依次打开 <code>Dashboard - 系统管理 - 系统配置</code>，找到<code>Publish over SSH</code>，点击<code>新增</code></p><p>填入服务器 IP、账号密码、根路径以及其他必要信息后点击保存 <img src="'+y+'" alt="创建构建任务"></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>构建时调用插件传输文件的路径均是相对于该处填写的<code>Remote Directory</code>，因此填写成根路径<code>/</code>比较方便</p></div></li></ol></li></ol><h3 id="创建-node-npm-构建任务" tabindex="-1">创建 node &amp;&amp; npm 构建任务 <a class="header-anchor" href="#创建-node-npm-构建任务" aria-label="Permalink to &quot;创建 node &amp;&amp; npm 构建任务&quot;">​</a></h3><p>点击左侧“新建任务”，再分别输入项目名、选择项目类型，最后点击确定</p><p><img src="'+u+'" alt="创建构建任务"></p><ol><li><p>配置源码管理</p><p>选择 <code>Git</code>，填入代码<code>仓库地址</code>，选择登录 gitlab 的<code>凭据</code>，填写<code>分支</code>后点击确定 <img src="'+b+'" alt="配置源码管理"></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>该步配置完后最好先执行构建一次，看看能否正常拉取代码，能正常拉取再继续后面的配置</p></div></li><li><p>配置构建环境</p><p>勾选<code>Provide Node &amp; npm bin/ folder to PATH</code>，选择要使用的 node 版本、选择 npmrc file，点击保存 <img src="'+B+'" alt="配置源码管理"></p></li><li><p>配置构建步骤</p><p>不同于 CD 主要过程，详细的 CD 过程应当如下： <img src="'+v+'" alt="详细的CD过程"></p><ol><li><p>配置步骤：install &amp;&amp; build</p><p>在构建任务配置中找到<code>Build Steps</code>，下拉选择<code>执行 shell</code><img src="'+_+`" alt="选择执行shell"></p><p>在<code>命令</code>输入框中输入构建命令，以前端构建为例，先安装再构建:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 对应步骤：install，安装 node_modules 时会自动使用前面配置的 taobao 源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 对应步骤：build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 压缩构建产物，便于构建后的文件传输；非必需步骤</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -czf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>构建后操作也可以传输整个目录，但同体积下传输单个压缩包文件比传输多个极小的文件效率高</p></div></li><li><p>配置步骤：send &amp;&amp; backup &amp;&amp; deploy</p><p>在<code>Build Steps</code>中下拉选择<code>Send files or execute commands over SSH</code><img src="`+s+`" alt="send-backup-deploy"></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到部署路径下</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先备份再部署</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 备份前应当先删除上次的备份，也可以备份上次的备份</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist-bak</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重命名文件夹即是备份</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist-bak</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 解压后得到的文件夹即是要部署的内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xzf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar.gz</span></span></code></pre></div></li><li><p>配置步骤：clean</p><p>用于构建的目录和用于部署的目录都会产生无用的内容，因此这两个地方都需要进行清除操作</p><ol><li><p>清除服务器部署目录下无用的内容</p><p><img src="`+s+`" alt="send-backup-deploy"></p><p>尾行增加脚本：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 部署后删除传输过来的内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar.gz</span></span></code></pre></div></li><li><p>清除工作空间构建后无用的内容</p><p>在构建任务配置中找到<code>Build Steps</code>，下拉选择<code>执行 shell</code></p><p>使用以下命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar.gz</span></span></code></pre></div><p><img src="`+E+'" alt="send-backup-deploy"></p></li></ol></li></ol><div class="tip custom-block"><p class="custom-block-title">记得点击“保存”</p></div><p>完整的配置如图： <img src="'+j+'" alt="send-backup-deploy"></p></li></ol>',34),x=[D];function A(q,J,P,S,w,N){return e(),a("div",null,x)}const I=i(f,[["render",A]]);export{z as __pageData,I as default};
