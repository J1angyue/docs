import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.iYiGCPlJ.js";const u=JSON.parse('{"title":"NGINX","description":"","frontmatter":{},"headers":[],"relativePath":"nginx/index.md","filePath":"nginx/index.md"}'),e={name:"nginx/index.md"},t=n(`<h1 id="nginx" tabindex="-1">NGINX <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;NGINX&quot;">​</a></h1><h2 id="安装-nginx" tabindex="-1">安装 NGINX <a class="header-anchor" href="#安装-nginx" aria-label="Permalink to &quot;安装 NGINX&quot;">​</a></h2><h3 id="解压" tabindex="-1">解压 <a class="header-anchor" href="#解压" aria-label="Permalink to &quot;解压&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-1.24.0.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-1.24.0</span></span></code></pre></div><h3 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc-c++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zlib-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pcre-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl-devel</span></span></code></pre></div><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>./configure --user=root --prefix=/usr/local/nginx-1.24.0 --with-http_ssl_module --with-http_v2_module</p><p>make</p><p>make install</p><h3 id="创建-logs-目录" tabindex="-1">创建 logs 目录 <a class="header-anchor" href="#创建-logs-目录" aria-label="Permalink to &quot;创建 logs 目录&quot;">​</a></h3><p>mkdir logs</p><h3 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h3><p>./sbin/nginx</p><h3 id="配置系统服务" tabindex="-1">配置系统服务 <a class="header-anchor" href="#配置系统服务" aria-label="Permalink to &quot;配置系统服务&quot;">​</a></h3><p>vi /etc/systemd/system/nginx.service</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Unit]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Nginx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTTP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Server</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">After</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">network.target</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Service]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">forking</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecStart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/local/nginx-1.24.0/sbin/nginx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecReload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/local/nginx-1.24.0/sbin/nginx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecStop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/local/nginx-1.24.0/sbin/nginx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PrivateTmp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Install]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WantedBy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">multi-user.target</span></span></code></pre></div><h3 id="重载-systemd-配置文件" tabindex="-1">重载 systemd 配置文件 <a class="header-anchor" href="#重载-systemd-配置文件" aria-label="Permalink to &quot;重载 systemd 配置文件&quot;">​</a></h3><p>systemctl daemon-reload</p><h3 id="开机自启" tabindex="-1">开机自启 <a class="header-anchor" href="#开机自启" aria-label="Permalink to &quot;开机自启&quot;">​</a></h3><p>systemctl enable nginx</p><p>安装完成~~</p><h3 id="nginx-service-命令" tabindex="-1">nginx service 命令 <a class="header-anchor" href="#nginx-service-命令" aria-label="Permalink to &quot;nginx service 命令&quot;">​</a></h3><p>systemctl start nginx</p><p>systemctl status nginx</p><p>systemctl restart nginx</p><h2 id="在既有-nginx-上增加编译-http2-模块" tabindex="-1">在既有 nginx 上增加编译 http2 模块 <a class="header-anchor" href="#在既有-nginx-上增加编译-http2-模块" aria-label="Permalink to &quot;在既有 nginx 上增加编译 http2 模块&quot;">​</a></h2><p>参考自：<a href="https://www.cnblogs.com/surging-dandelion/p/14378073.html" target="_blank" rel="noreferrer">既有 Nginx 不停服重新动态编译增加 http2.0 模块</a></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -V</span></span></code></pre></div><p>复制 <code>configure arguments</code>，增加 <code>--with-http_v2_module</code></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix=/usr/local/nginx-1.24.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user=root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-http_ssl_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-http_stub_status_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-http_v2_module</span></span></code></pre></div><p>只 make 不 install</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span></code></pre></div><p>make 过后在编译目录 下 objs 中生成新的 nginx 执行文件</p><p>备份 ./sbin 下的 nginx</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sbin/nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sbin/nginx-without-h2.bak</span></span></code></pre></div><p>将新编译的 nginx 执行文件拷贝到原执行文件的位置</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> objs/nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sbin/nginx</span></span></code></pre></div><p>查看现有 nginx 快捷运行命令</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">whereis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span></code></pre></div><p>备份现有 nginx 快捷运行命令</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/nginx-without-h2.bak</span></span></code></pre></div><p>拷贝 nginx 运行命令，快捷运行</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sbin/nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/</span></span></code></pre></div><p>编辑 nginx.conf</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 443</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>重启 nginx</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 必须 stop、不能 reload</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span></span></code></pre></div><h2 id="强制协商缓存-index-html" tabindex="-1">强制协商缓存 index.html <a class="header-anchor" href="#强制协商缓存-index-html" aria-label="Permalink to &quot;强制协商缓存 index.html&quot;">​</a></h2><div class="language-nginx.conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx.conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location / {</span></span>
<span class="line"><span>    root D:/Softs/nginx-1.23.4/html/dist;</span></span>
<span class="line"><span>    try_files $uri $uri/ /index.html;</span></span>
<span class="line"><span>    index  index.html;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # ++++++++</span></span>
<span class="line"><span>    if ($request_filename ~* .*index\\.(html)$){</span></span>
<span class="line"><span>        add_header Cache-Control &quot;no-cache&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="root-与-alias-的区别" tabindex="-1">root 与 alias 的区别 <a class="header-anchor" href="#root-与-alias-的区别" aria-label="Permalink to &quot;root 与 alias 的区别&quot;">​</a></h2><p>相关模块：<code>ngx_http_core_module</code></p><h3 id="alias-定义请求替换项" tabindex="-1">alias 定义请求替换项 <a class="header-anchor" href="#alias-定义请求替换项" aria-label="Permalink to &quot;alias 定义请求替换项&quot;">​</a></h3><div class="language-nginx.conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx.conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location /i/ {</span></span>
<span class="line"><span>    alias /data/images/;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>当请求 /i/top.gif 时，返回 /data/images/top.gif</p><p>即：用 alias 后面的内容替换 location 后面的内容</p><h3 id="root-定义请求根目录" tabindex="-1">root 定义请求根目录 <a class="header-anchor" href="#root-定义请求根目录" aria-label="Permalink to &quot;root 定义请求根目录&quot;">​</a></h3><div class="language-nginx.conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx.conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location /i/ {</span></span>
<span class="line"><span>    root /data/images;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>当请求 /i/top.gif 时，返回 /data/images/i/top.gif</p><p>即：用 root 后面的内容拼接上 location 后面的内容</p><h2 id="proxy-pass-后有无-的区别" tabindex="-1">proxy_pass 后有无 <code>/</code> 的区别 <a class="header-anchor" href="#proxy-pass-后有无-的区别" aria-label="Permalink to &quot;proxy_pass 后有无 \`/\` 的区别&quot;">​</a></h2><p>相关模块：<code>ngx_http_proxy_module</code></p><h3 id="结尾有斜杠" tabindex="-1">结尾有斜杠 <a class="header-anchor" href="#结尾有斜杠" aria-label="Permalink to &quot;结尾有斜杠&quot;">​</a></h3><div class="language-nginx.conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx.conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location /name/ {</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1/;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>/name/ 被认为是根路径，直接访问 /name/ 后面的路径即可，则 nginx 不会保留 /name/</p><p>即：使用 proxy_pass 后面的内容 替换 请求路径中开头及 location 的内容</p><p>例：请求 <a href="http://localhost/name/abc%EF%BC%8C%E5%B0%86%E8%A2%AB%E4%BB%A3%E7%90%86%E5%88%B0" target="_blank" rel="noreferrer">http://localhost/name/abc，将被代理到</a> <a href="http://127.0.0.1/abc" target="_blank" rel="noreferrer">http://127.0.0.1/abc</a></p><h3 id="结尾无斜杠" tabindex="-1">结尾无斜杠 <a class="header-anchor" href="#结尾无斜杠" aria-label="Permalink to &quot;结尾无斜杠&quot;">​</a></h3><div class="language-nginx.conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx.conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location /name/ {</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>/name/ 被认为是某个相对路径，nginx 需要保留完整路径才能正确访问</p><p>即：使用 proxy_pass 的内容 拼接 请求中 location 及之后的内容</p><p>例：请求 <a href="http://localhost/name/abc%EF%BC%8C%E5%B0%86%E8%A2%AB%E4%BB%A3%E7%90%86%E5%88%B0" target="_blank" rel="noreferrer">http://localhost/name/abc，将被代理到</a> <a href="http://127.0.0.1/name/abc" target="_blank" rel="noreferrer">http://127.0.0.1/name/abc</a></p><h2 id="开启同源策略" tabindex="-1">开启同源策略 <a class="header-anchor" href="#开启同源策略" aria-label="Permalink to &quot;开启同源策略&quot;">​</a></h2><p>常规、标准的 <code>CORS</code> 控制是通过预检请求时请求头中 <code>Origin</code> 与响应头中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials" target="_blank" rel="noreferrer"><code>Access-Control-Allow-xx</code></a> 配合实现的，即通过 nginx 判断 <code>Origin</code> 然后给响应设置对应的响应头即可。</p><p>但通过设置响应头来控制，需要配置的行数过多，有一种简单的办法：<strong>给非法源的请求返回 http 错误</strong>，比如 500 等，同样能达到限制同源的效果。</p><h3 id="_1-确定好允许的源" tabindex="-1">1. 确定好允许的源 <a class="header-anchor" href="#_1-确定好允许的源" aria-label="Permalink to &quot;1. 确定好允许的源&quot;">​</a></h3><p>首先能确定的是自己服务所在的源能访问自己的服务</p><p>服务部署在公网的 <code>https://host/path</code> 上，<code>https://host/path</code> 就作为一个合法的源，应当允许该源访问</p><p>如果有通过内网访问这个服务的需求，而这个服务部署在了 <code>10.20.30.40</code> 这台服务器的 <code>8080</code> 端口上，那么 <code>http://10.20.30.40:8080</code> 或者 <code>https://10.20.30.40:8080</code> 也作为一个合法的源</p><p>当请求头中 <code>Origin</code> 为上述两个 URL 时应当正常返回，否则应当返回 http 500</p><h3 id="_2-构建合法源的列表" tabindex="-1">2. 构建合法源的列表 <a class="header-anchor" href="#_2-构建合法源的列表" aria-label="Permalink to &quot;2. 构建合法源的列表&quot;">​</a></h3><div class="language-nginx.conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx.conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 在 server 上方添加 map</span></span>
<span class="line"><span>map $http_origin $origin_status {</span></span>
<span class="line"><span>    &quot;~^https://host/path&quot; 1;</span></span>
<span class="line"><span>    &quot;~^https(?)://10.20.30.40:8080&quot; 1;</span></span>
<span class="line"><span>    # 假如还有第三方合法源也可以放在后面</span></span>
<span class="line"><span>    &quot;~*&quot; 0;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>当 <code>$http_origin</code> 的值是 <code>https://host/path</code> 时，<code>$origin_status</code> 的值是 <code>1</code></p><p>当 <code>$http_origin</code> 的值是 <code>http://10.20.30.40:8080</code> 或者 <code>https://10.20.30.40:8080</code> 时，<code>$origin_status</code> 的值是 <code>1</code></p><p>当 <code>$http_origin</code> 的值是其他值时，<code>$origin_status</code> 的值是 <code>0</code></p><h3 id="_3-非法源返回-500" tabindex="-1">3. 非法源返回 500 <a class="header-anchor" href="#_3-非法源返回-500" aria-label="Permalink to &quot;3. 非法源返回 500&quot;">​</a></h3><div class="language-nginx.conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx.conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>map $http_origin $origin_status {</span></span>
<span class="line"><span>    &quot;~^https://host/path&quot; 1;</span></span>
<span class="line"><span>    &quot;~^https(?)://10.20.30.40:8080&quot; 1;</span></span>
<span class="line"><span>    &quot;~*&quot; 0;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>    location /api {</span></span>
<span class="line"><span>        if ($origin_status = 0){</span></span>
<span class="line"><span>            return 500;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        proxy_pass http://localhost:48080/some-api;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>当请求的源不是 map 中的值时，会返回 http 500 给请求方</p>`,88),p=[t];function l(h,o,d,c,r,k){return i(),a("div",null,p)}const b=s(e,[["render",l]]);export{u as __pageData,b as default};
