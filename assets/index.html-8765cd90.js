import{_ as o,r as c,o as i,c as p,a as n,b as s,d as e,e as t}from"./app-a672bafd.js";const l="/docs/assets/2023-09-11_143646-7f434e71.jpg",r="/docs/assets/2023-09-11_145916-4b55984d.jpg",d="/docs/assets/2023-09-11_150205-5fca693b.jpg",u="/docs/assets/2023-09-11_152652-e7cdd4cd.jpg",k="/docs/assets/2023-09-11_162750-65674d84.jpg",m="/docs/assets/2023-09-11_190923-5e7a9d53.jpg",v="/docs/assets/2023-09-11_191300-21828a15.jpg",h="/docs/assets/2023-09-11_191530-5c61f0fa.jpg",b="/docs/assets/zdb服务器-7b5068e9.jpg",g={},y=n("h1",{id:"sentry-监控平台",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sentry-监控平台","aria-hidden":"true"},"#"),s(" Sentry 监控平台")],-1),_=n("p",null,"搭建自托管私服，不使用 Sentry 开放于互联网的 SaaS 服务",-1),f=n("h2",{id:"下载-安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#下载-安装","aria-hidden":"true"},"#"),s(" 下载 & 安装")],-1),x={href:"https://develop.sentry.dev/self-hosted/",target:"_blank",rel:"noopener noreferrer"},S=t('<h3 id="_1-准备服务器" tabindex="-1"><a class="header-anchor" href="#_1-准备服务器" aria-hidden="true">#</a> 1. 准备服务器</h3><p>镜像：<code>CentOS-7-x86_64-DVD-2009.iso</code></p><p>硬件配置要求：</p><ul><li>CPU：<code>4 核</code> 及以上</li><li>运存：<code>3800 MB</code> 及以上</li><li>磁盘：<code>20 GB</code> 及以上</li></ul><p>不满足硬件要求将无法通过 sentry 的校验，无法进行安装</p><h3 id="_2-安装-docker-和-docker-compose" tabindex="-1"><a class="header-anchor" href="#_2-安装-docker-和-docker-compose" aria-hidden="true">#</a> 2. 安装 docker 和 docker-compose</h3>',6),D={href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"},w=t(`<ol><li><p>移除旧版 docker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
               docker-client <span class="token punctuation">\\</span>
               docker-client-latest <span class="token punctuation">\\</span>
               docker-common <span class="token punctuation">\\</span>
               docker-latest <span class="token punctuation">\\</span>
               docker-latest-logrotate <span class="token punctuation">\\</span>
               docker-logrotate <span class="token punctuation">\\</span>
               docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装 yum 并设置 yum&amp;docker 源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
<span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装 docker 和 docker-compose</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启动 docker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="_3-下载-sentry" tabindex="-1"><a class="header-anchor" href="#_3-下载-sentry" aria-hidden="true">#</a> 3. 下载 sentry</h3>`,2),q={href:"https://github.com/getsentry/self-hosted/releases",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/getsentry/self-hosted/releases/tag/23.8.0",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>下载后得到 <code>self-hosted-23.8.0.tar.gz</code></p><h3 id="_4-安装-sentry" tabindex="-1"><a class="header-anchor" href="#_4-安装-sentry" aria-hidden="true">#</a> 4. 安装 sentry</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将压缩包移动到 /usr/local 后再执行 tar 命令</span>
<span class="token builtin class-name">cd</span> /usr/local
<span class="token comment"># 解压完成后得到 self-hosted-23.8.0 目录</span>
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> self-hosted-23.8.0.tar.gz
<span class="token comment"># 重命名目录，方便查找与进入</span>
<span class="token function">mv</span> self-hosted-23.8.0 setnry
<span class="token builtin class-name">cd</span> setnry
./install.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不是非得放在 <code>/usr/local</code>，非系统关键位置都可以</p><p>该步：<code>▶ Fetching and updating Docker images ...</code>会卡住较长时间，解决方法：</p><ol><li><p>等待几十分钟后若仍然不动直接按下<code>Ctrl + C</code>结束进程即可，结束后再次执行<code>./install.sh</code>，多等待几次，多结束几次，安装就能进行到下一步；或者参考 2\\3</p></li><li><p>设置 docker 国内镜像源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker
<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">&#39;EOF&#39;
{
   &quot;registry-mirrors&quot;: [&quot;https://rsm2lnlp.mirror.aliyuncs.com&quot;]
}
EOF</span>
<span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>加速 github (<code>23.8.0: Pulling from getsentry/sentry</code>)、魔法上网</p></li></ol><h3 id="_5-创建首个账号" tabindex="-1"><a class="header-anchor" href="#_5-创建首个账号" aria-hidden="true">#</a> 5. 创建首个账号</h3><p><code>Would you like to create a user account now? [Y/n]: Y</code></p><p>输入邮箱（账号）、密码即完成安装</p><h2 id="启-停-sentry" tabindex="-1"><a class="header-anchor" href="#启-停-sentry" aria-hidden="true">#</a> 启/停 sentry</h2><p>docker 未启动时应当先启动 docker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动 sentry 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/sentry
<span class="token function">docker</span> compose up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>停止 sentry 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/sentry
<span class="token function">docker</span> compose down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="首次访问-sentry" tabindex="-1"><a class="header-anchor" href="#首次访问-sentry" aria-hidden="true">#</a> 首次访问 sentry</h2><p>浏览器访问 <code>http://\${服务器IP}:9000</code>，输入安装时创建的账号密码进行登录</p><p>登陆后将跳转到一个初始配置页面，可以不做任何配置改动，直接点击底部 <code>continue</code> 按钮。</p><p>点击左上角<code>Sentry</code>文字，再点击下拉菜单中的<code>User settings</code>：</p><ul><li>将 <code>Language</code>设置为<code>Simplified Chinese</code></li><li>将 <code>Timezone</code>设置为<code>Shanghai</code></li><li>刷新浏览器后界面就变成了中文</li></ul><p><img src="`+l+'" alt="调整界面语言与时区"></p><h2 id="使用-sentry" tabindex="-1"><a class="header-anchor" href="#使用-sentry" aria-hidden="true">#</a> 使用 sentry</h2><h3 id="_1-在-sentry-创建项目" tabindex="-1"><a class="header-anchor" href="#_1-在-sentry-创建项目" aria-hidden="true">#</a> 1. 在 sentry 创建项目</h3><p>点击左侧菜单项<code>项目</code>，再点击右上角<code>创建项目</code></p><p><img src="'+r+'" alt="创建项目"></p><p>平台选择<code>VUE</code>，在页面底部<code>项目名称</code>处填入项目名称，最后点击<code>创建项目</code></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>项目名称依据自己的真实项目随意填写，这里只是以<code>zhuandai_frontend</code>为例</p></div><p><img src="'+d+'" alt="创建项目"></p><h3 id="_2-vue-前端项目集成-sentry-sdk" tabindex="-1"><a class="header-anchor" href="#_2-vue-前端项目集成-sentry-sdk" aria-hidden="true">#</a> 2. Vue 前端项目集成 sentry SDK</h3>',30),P={href:"https://docs.sentry.io/platforms/javascript/guides/vue/",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>以下为简单集成方式，后续需要添加 <code>version</code> 以及 <code>environment</code></p><h4 id="_1-安装-sdk" tabindex="-1"><a class="header-anchor" href="#_1-安装-sdk" aria-hidden="true">#</a> 1. 安装 SDK</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @sentry/vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-获取-dsn-客户端密钥" tabindex="-1"><a class="header-anchor" href="#_2-获取-dsn-客户端密钥" aria-hidden="true">#</a> 2. 获取 DSN 客户端密钥</h4><p>DSN 是一个字符串，包含了明文密钥和 sentry 服务的 IP、端口号等信息。在前端初始化 SDK 时传入 DSN，SDK 通过解析这个 DSN 字符串获得上报的权限以及知道向哪里上报事件。</p><p>点击左侧菜单项<code>项目</code>，再点击该项目的齿轮图标</p><p><img src="`+u+'" alt="获取 DSN"></p><p>点击左侧<code>客户端密钥 (DSN)</code>，再双击右侧 <code>DSN</code> 输入框内的文字进行全选，全选后进行复制</p><p><img src="'+k+`" alt="获取 DSN"></p><h4 id="_3-引入-初始化-sdk" tabindex="-1"><a class="header-anchor" href="#_3-引入-初始化-sdk" aria-hidden="true">#</a> 3. 引入 &amp; 初始化 SDK</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> BrowserTracing<span class="token punctuation">,</span> vueRouterInstrumentation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@sentry/vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">setupSentry</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> router</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    app<span class="token punctuation">,</span>
    <span class="token comment">// 填入 DSN</span>
    <span class="token literal-property property">dsn</span><span class="token operator">:</span> <span class="token string">&quot;填入复制的 DSN&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">integrations</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">BrowserTracing</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">routingInstrumentation</span><span class="token operator">:</span> <span class="token function">vueRouterInstrumentation</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Now in main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-router&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token comment">/* App.vue */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token comment">/* { options } */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 必须先初始化 sentry 再 mount</span>
<span class="token function">setupSentry</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">提示</p><p>SDK 不会在开发模式下上报异常，构建后才能看到上报的请求</p></div><h3 id="_3-上传-sourcemap" tabindex="-1"><a class="header-anchor" href="#_3-上传-sourcemap" aria-hidden="true">#</a> 3. 上传 sourcemap</h3><h4 id="_1-安装上传插件" tabindex="-1"><a class="header-anchor" href="#_1-安装上传插件" aria-hidden="true">#</a> 1. 安装上传插件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @sentry/vite-plugin <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-获取-authtoken" tabindex="-1"><a class="header-anchor" href="#_2-获取-authtoken" aria-hidden="true">#</a> 2. 获取 authToken</h4><p>点击左上角，选择<code>User auth tokens</code>，再点击<code>创建新的令牌</code></p><p><img src="`+m+'" alt="获取 authToken"></p><p>作用域使用默认即可，最后点击<code>创建令牌</code></p><p><img src="'+v+'" alt="获取 authToken"></p><p>双击右侧 <code>认证令牌</code> 输入框内的文字进行全选，全选后进行复制</p><p><img src="'+h+`" alt="获取 authToken"></p><h4 id="_3-引入-初始化上传插件" tabindex="-1"><a class="header-anchor" href="#_3-引入-初始化上传插件" aria-hidden="true">#</a> 3. 引入 &amp; 初始化上传插件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> sentryVitePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@sentry/vite-plugin&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略其他配置</span>
  <span class="token operator">...</span><span class="token punctuation">,</span>
  <span class="token comment">// sourcmap 应当设置为 true</span>
  <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 省略其他插件</span>
    <span class="token operator">...</span><span class="token punctuation">,</span>
    <span class="token comment">// Put the Sentry vite plugin after all other plugins</span>
    <span class="token function">sentryVitePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">authToken</span><span class="token operator">:</span> <span class="token string">&quot;填入复制的 authToken&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 填入组织 ID，默认都是 sentry</span>
      <span class="token literal-property property">org</span><span class="token operator">:</span> <span class="token string">&quot;sentry&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 项目名称</span>
      <span class="token literal-property property">project</span><span class="token operator">:</span> <span class="token string">&quot;zhuandai_frontend&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// sentry 服务的 IP + PORT</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>服务器<span class="token constant">IP</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:9000</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建成功后、完成前会自动上传</p><div class="custom-container warning"><p class="custom-container-title">提示</p><p>依据 sentry 官方提示与要求，<code>sentryVitePlugin</code> 应当位于 <code>plugins</code> 的最后</p></div><h2 id="zdb-使用中的客制化" tabindex="-1"><a class="header-anchor" href="#zdb-使用中的客制化" aria-hidden="true">#</a> ZDB 使用中的客制化</h2><p>客制化哪些内容由 ZDB 的服务器情况决定：</p><p><code>sentry</code>部署在一个内网服务器上，只能通过内部网络访问 sentry 服务器，外部互联网无法直接访问 sentry 服务器发送上报请求。 因此上报异常的请求先到达测试服务器上，由测试服务器上的<code>nginx</code>走内网转发代理到<code>sentry</code>服务器上。</p><p><img src="`+b+'" alt="ZDB 服务器"></p><p>无法更改时区 https://github.com/getsentry/self-hosted/issues/2405</p><ol><li>修改 URL-PREFIX</li></ol><p>管理 -》 settings 根 url ：https://zdb.sdf.red:48180/sentry</p>',33);function I(T,z){const a=c("ExternalLinkIcon");return i(),p("div",null,[y,_,f,n("p",null,[n("a",x,[s("官方自托管私服搭建教程"),e(a)])]),S,n("p",null,[n("a",D,[s("Docker 官方教程"),e(a)])]),w,n("p",null,[n("a",q,[s("所有的 release 版本下载地址"),e(a)])]),n("p",null,[s("ZDB 使用的版本是 "),n("a",j,[s("self-hosted-23.8.0"),e(a)])]),N,n("p",null,[n("a",P,[s("官方集成教程"),e(a)])]),B])}const E=o(g,[["render",I],["__file","index.html.vue"]]);export{E as default};
